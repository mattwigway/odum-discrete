---
title: Introduction to discrete choice models in R
author: Matt Bhagat-Conway
date: August 11, 2022
institute: Odum Institute<br/>University of North Carolina at Chapel Hill
format:
    revealjs:
        theme: [default, datamatters.scss]
        width: 1280
        height: 720
        logo: dm-logo.png
execute:
    cache: true
bibliography: discrete-choice.bib
---

## About me

```{r}
#| echo: false
#| cache: false
system2("julia", c("extract_chunks.jl", "discrete-choice.qmd"))
```

```{r}
#| include=FALSE
library(ggplot2)
bgcolor = "#002e3e"
fgcolor = "#ffffff"
linecolor = "#ff0948"

theme_dm = theme_minimal() + theme(
    panel.background=element_rect(fill=bgcolor, color=fgcolor),
    panel.grid=element_blank(),
    plot.background=element_rect(fill=bgcolor, size=0),
    axis.text=element_text(size=10, color=fgcolor),
    axis.title=element_text(size=14, color=fgcolor)
)

update_geom_defaults("point", list(color=linecolor))
update_geom_defaults("line", list(color=linecolor))
update_geom_defaults("col", list(color=linecolor, fill=linecolor))

library(knitr)
```

- Assistant professor of City and Regional Planning
- Research focus: transportation modeling and simulation
    - Heavy use of discrete choice models
- PhD in Geography from Arizona State
- Three years experience as transportation modeling software developer

## Before we go any further

- If you haven't already installed R, RStudio, `apollo`, and `tidyverse`, do so now
- R: [https://r-project.org](https://r-project.org)
- RStudio: [https://rstudio.com](https://rstudio.com)
- `apollo` and `tidyverse`: in RStudio console, run:
```r
install.packages("tidyverse")
install.packages("apollo")
```



## What are discrete choice models?

- Any model of a variable that takes on discrete values
- Could be binary (two values), categorical (more than two values), or quantized (e.g., integers)

## Types of discrete choice models

- Random utility models
    - Logistic regression, multinomial logistic regression, ordered logit, mixed logit
- Count models
    - Poisson and negative binomial regression
- Machine learning
    - Random forests, support vector machines, _k_ nearest neighbors

## Random utility theory

- Individuals are maximizing the _utility_ of their choices
- Utility is an abstract concept of value
- Individuals choose the choice with the highest utility
- Utility is random because there is a random component to utility
- We won't know which choice is the highest utility for an individual, only the probabilities that a particular choice will have the highest utility

# Binary logistic regression

## Binary logistic regression

- A very common model for binary (yes/no) outcomes
- Probably familiar to many
- Usually presented as a generalized linear model

## Binary logistic regression: Intuition

- Linear functions can take on any value
- Probabilities need to be between 0 and 1
- The logit function transforms arbitrary linear values to (0, 1)

## Binary logistic regression: the math

$$
y^* = \alpha + \beta_1 x_1 + \beta_2 x_2 \cdots + \epsilon
$$

$$
\epsilon \thicksim \mathrm{Logistic}
$$
$$
p(y = 1) = p(y^* > 0) = \frac{e^{y^*}}{1 + e^{y^*}}
$$


## The logit function

<!-- run logistic regression -->
```{r}
#| fig-alt: Logistic regression, showing sigmoid function
#| dev: svg
#| fig-width: 6
#| fig-height: 3
#| out-width: 1200px
#| fig-align: center
library(ggplot2)

xs = seq(-5.5, 5.5, 0.1)
ys = exp(xs) / (1 + exp(xs))

data = data.frame(x=xs, y=ys)

ggplot(data, aes(x=x, y=y)) +
    theme_dm +
    geom_line() +
    xlab("Utility") +
    ylab("Probability") +
    coord_cartesian(xlim=c(-5, 5))

```

## Logistic regression in R

`nhts-carpool-glm.R`

```{r}
#| echo: true
#| output: false
#| filename: nhts-carpool-glm.R
library(tidyverse)

data = read_csv("data/nhts/carpool.csv")

glm_model = glm(carpool~hhsize+cars_per_driver+commute+social,
    family=binomial(link="logit"), data)
summary(glm_model)
```

## Logistic regression in R

```{r}
summary(glm_model)
```

## Binary logistic regression as a random utility model

- We can treat the linear predictor in logistic regression as the utility of the modeled outcome
- In this case, the utility of carpooling
- We also need a utility of not carpooling
- Decisionmakers will choose the highest utility _alternative_

## Binary logistic regression as a random utility model

- Utilities are only meaningful relative to each other
- Usual practice is to set utility of one alternative to 0

## Binary logistic regression as a random utility model

$$
y^* = \alpha + \beta_1 x_1 + \beta_2 x_2 \cdots + \epsilon
$$
$$
p(y = 1) = p(y^* > 0)\\= \frac{e^{y^*}}{1 + e^{y^*}}
$$



## Binary logistic regression as a random utility model

$$
U_{y=1} = \alpha + \beta_1 x_1 + \beta_2 x_2 \cdots + \epsilon_1
$$
$$
U_{y=0} = 0 + \epsilon_0
$$

$$
p(y = 1) = p(U_{y=1} > U_{y=0})\\= \frac{e^{U_{y=1}}}{e^{U_{y=0}} + e^{U_{y=1}}}
$$

## Binary logistic regression as a random utility model in R

```{r}
#| include: false
rm(list=setdiff(ls(), c("glm_model"))) # clean environment, keep glm model for comparison
```

`nhts-carpool-apollo.R`
```{r}
#| echo: true
#| filename: nhts-carpool-apollo.R
library(apollo)
library(tidyverse)

# Read data - variable must be called "database"
database = read_csv("data/nhts/carpool.csv")
```

---

```{r}
#| echo: true
#| filename: nhts-carpool-apollo.R

# Initialize Apollo library
apollo_initialise()

# set parameters for overall model
apollo_control = list(
    modelName="Carpool_binary",
    indivID="id"
)
```

---


```{r}
#| echo: true
#| filename: nhts-carpool-apollo.R


# In Apollo, you specify your utility functions by hand,
# first telling Apollo what coefficients to estimate
apollo_beta = c(
    constant_carpool = 0, # 0 is starting value
    b_hhsize = 0,
    b_cars_per_driver = 0,
    b_commute = 0,
    b_social = 0
)

# any parameters that you want to remain constant go here
apollo_fixed = c()
```

---

```{r}
#| echo: true
#| filename: nhts-carpool-apollo.R

# prepare the inputs to the Apollo estimation code
apollo_inputs = apollo_validateInputs()
```

---


```{r}
#| echo: true
#| filename: nhts-carpool-apollo.R

# this function calculates probabilities of each alternative
apollo_probabilities = function(apollo_beta, apollo_inputs,
        functionality="estimate") {
    # so we can refer to variables by name
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))

    # This is the list of probabilities for the alternatives
    # for each observation
    P = list()

    # Define utility functions
    V = list()
    V[["carpool"]] = constant_carpool + b_hhsize * hhsize +
        b_cars_per_driver * cars_per_driver +
        b_commute * commute + b_social * social
    V[["not_carpool"]] = 0

    # associate utility functions with data
    logit_settings = list(
        alternatives = c(carpool=T, not_carpool=F),
        avail        = list(carpool=T, not_carpool=T),
        choiceVar    = carpool,
        utilities    = V
    )

    # compute probabilities
    P[["model"]] = apollo_mnl(logit_settings, functionality)

    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
}
```

---

```{r}
#| echo: true
#| filename: nhts-carpool-apollo.R

# finally, estimate the model
model = apollo_estimate(apollo_beta, apollo_fixed,
    apollo_probabilities, apollo_inputs)
```

---

```{r}
#| echo: true
#| filename: nhts-carpool-apollo.R

# print results
apollo_modelOutput(model)
```

## But don't take my word for it...

```{r}
#| echo: false
summary(glm_model)
```

# Questions?

# The multinomial logit model

## What about more than two outcomes?

- Random utility theory doesn't constrain us to two outcomes
- We can have many outcomes, and decisionmakers choose the one with the highest utility
- This is known as a _multinomial_ model

## Extending logistic regression to the multinomial case

- Instead of two utilities $U_{y=1}$ and $U_{y=0}$, we have arbitrary number of utility functions $U_i$
- Decisionmakers choose the option with the highest utility
- As with binary logistic regression, utility functions are usually linear combinations of parameters

## Multinomial logistic regression: the math

- Probability then becomes

$$
p(y=i)\\= p(U_i > \mathrm{all~other}~U)\\
    =\frac{e^{U_i}}{e^{U_1} + e^{U_2} \cdots}\\
    =\frac{e^{U_i}}{\sum_{j \in I} e^{U_j}}
$$

## Multinomial logistic regression in R

```{r}
#| include: false
rm(list=ls())
```

- We will build a model of working from home expectation post-pandemic, using data from the [COVID Future](https://covidfuture.org) study.
- We will estimate four utility functions, for being unable to, rarely, frequently, and always working from home
- Based on age, income, and job type
- These utility functions will have the same variables but different coefficients
- Each will also have a _alternative specific constant_---like a constant in logistic regression that represents the base rate, but for each alternative
- One utility function will be held at zero

## Multinomial logistic regression in R

`covidfuture-wfh-mnl.R`

```{r}
#| echo: true
#| filename: covidfuture-wfh-mnl.R
library(apollo)
library(tidyverse)

database = read_csv("data/covidfuture_wfh.csv")

apollo_initialise()

apollo_control = list(
    modelName="WFH_Postpandemic",
    indivID="resp_id"
)
```

---

```{r}
#| echo: true
#| filename: covidfuture-wfh-mnl.R

head(database)
```

---

```{r}
#| echo: true
#| filename: covidfuture-wfh-mnl.R

# now, we must define all the coefficients
# we have separate sets of coefficients for each utility
# function, because the utilities need to be different
apollo_beta = c(
    asc_rarely = 0,
    asc_often = 0,
    asc_always = 0,
    b_rarely_age = 0,
    b_often_age = 0,
    b_always_age = 0,
    b_rarely_highinc = 0,
    b_often_highinc = 0,
    b_always_highinc = 0,
    b_rarely_service_worker = 0,
    b_often_service_worker = 0,
    b_always_service_worker = 0
)
```
---

```{r}
#| echo: true
#| filename: covidfuture-wfh-mnl.R

apollo_fixed = c()

apollo_inputs = apollo_validateInputs()
```

---

```{r}
#| echo: true
#| filename: covidfuture-wfh-mnl.R

# Finally, we define the utility functions in apollo_probabilities
apollo_probabilities = function(apollo_beta, apollo_inputs,
        functionality="estimate") {
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))

    P = list()

    # define utility functions
    V = list()
    # fix one utility to zero
    V[["Unable"]] = 0
    V[["Rarely"]] = asc_rarely + b_rarely_age * age +
        b_rarely_highinc * income_100k_plus +
        b_rarely_service_worker * service_worker
    V[["Often"]] = asc_often + b_often_age * age +
        b_often_highinc * income_100k_plus +
        b_often_service_worker * service_worker
    V[["Always"]] = asc_always + b_always_age * age +
        b_always_highinc * income_100k_plus +
        b_always_service_worker * service_worker
        
    mnl_settings = list(
        alternatives = c(Unable="Unable", Rarely="Rarely",
            Often="Often", Always="Always"),
        avail = list(Unable=T, Rarely=T, Often=T, Always=T),
        choiceVar = wfh,
        utilities = V
    )

    P[["model"]] = apollo_mnl(mnl_settings, functionality)
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
}
```

---

```{r}
#| echo: true
#| filename: covidfuture-wfh-mnl.R

# estimate model
model = apollo_estimate(apollo_beta, apollo_fixed,
    apollo_probabilities, apollo_inputs)
```

---

```{r}
#| echo: true
#| filename: covidfuture-wfh-mnl.R

# Print results
apollo_modelOutput(model)
```

## Interpreting multinomial logit results

```{r}
df = data.frame(
        round(matrix(model$estimate, 4, 3, byrow=T), digits=2),
        row.names=c("ASC", "Age", "High income", "Service worker")
)
names(df) <- c("Rarely", "Often", "Always")
kable(df)
```

Note: all variables significant at $p < 0.05$

---

- Relative to being unable to WFH,
    - Older people are less likely to WFH rarely or often, but more likely to always
    - Higher income people are much more likely to be able to and choose to WFH
    - Service workers are less likely to be able to WFH
    - Scale of age variable is different from others

# Questions?

## Specifying a multinomial logit model

- Multinomial logit models can have independent variables that vary at the individual level (e.g., income)
- Can also have variables at the alternative level (e.g., travel time)
- Utilities identified only up to a constant offset
    - Constant changes to all utilities does not change outcome

## Specifying a multinomial logit model
- Variables that vary at _individual_ level must have different coefficients for each alternative, and one must be zero
- Variables that vary at _alternative_ level may or may not have different coefficients for each alternative, and there is no need have one zero coefficient
    - But you do have to know values for unchosen alternatives

## Specifying a multinomial logit model

```{dot}
//| fig-width: 12
//| fig-height: 6

digraph G{
    bgcolor = "#00000000";
    node [color = "#ffffff", fontcolor = "#ffffff"];
    edge [color = "#ffffff"];

    inc [label=Income, shape=box];
    subgraph clustertt {
        color = "#00000000";
    ttw [label="Travel time of walk", shape=box];
    ttb [label="Travel time of bus", shape=box];
    ttc [label="Travel time of car", shape=box];
    }

    uw [label = "Utility of walk"];
    ub [label = "Utility of bus"];
    uc [label = "Utility of car"];

    edge [arrowhead = none];
    node [shape = none, label = "", margin=0, width=0, height=0];
    inc -> iw;
    inc -> ib;
    inc -> ic;
    ttw -> tw;
    ttb -> tb;
    ttc -> tc;

    edge [arrowhead = normal];
    iw -> uw;
    ib -> ub;
    ic -> uc;
    tw -> uw;
    tb -> ub;
    tc -> uc;

    edge [color="#ff0948", arrowhead=none];
    node [color="#ff0948", shape=none, fontcolor="#ff0948"];
    md [label = "Must be different,\none must be zero"];
    cs [label = "Can be same"];

    iw -> md;
    ic -> md;
    ib -> md;

    cs -> tw;
    cs -> tb;
    cs -> tc;

}
```

## Estimating a multinomial logit model in R

```{r}
#| echo: false
rm(list=ls())
```

- We're going to build a multinomial logit mode choice model of intercity mode choice
- Data from Apollo examples

## The data

```{r}
#| echo: false
kable(read_csv("data/modechoice_apollo.csv", n_max=6))
```

```{r}
#| include: false
rm(list=ls())
```

## Estimation in R

`mode-choice-mnl.R`

```{r}
#| echo: true
#| filename: mode-choice-mnl.R

library(apollo)
library(tidyverse)

database = read_csv("data/modechoice_apollo.csv")

apollo_initialise()

apollo_control = list(
    modelName = "Apollo_Mode_Choice",
    indivID="ID"
)
```

---

```{r}
#| echo: true
#| filename: mode-choice-mnl.R
head(database)
```

---

```{r}
#| echo: true
#| filename: mode-choice-mnl.R

apollo_beta = c(
    asc_air = 0,
    asc_bus = 0,
    asc_rail = 0,
    # leaving out an asc_car as base category
    b_cost = 0,
    b_access_time = 0,
    b_in_vehicle_time = 0,
    # income is an individual level variable, so
    # must be different for different alternatives
    b_income_air = 0,
    b_income_bus = 0,
    b_income_rail = 0
)
```

---

```{r}
#| echo: true
#| filename: mode-choice-mnl.R

apollo_fixed = c()

apollo_inputs = apollo_validateInputs()
```

---

```{r}
#| echo: true
#| filename: mode-choice-mnl.R

apollo_probabilities = function(apollo_beta, apollo_inputs,
        functionality="estimate") {
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))

    P = list()

    # define utility functions
    V = list()
    # We can include cost and in-vehicle time here because they vary over
    # alternatives
    V[["car"]] = b_cost * cost_car +
        b_in_vehicle_time * time_car

    V[["air"]] = asc_air +
        b_cost * cost_air +
        b_in_vehicle_time * time_air +
        b_access_time * access_air +
        b_income_air * income

    V[["rail"]] = asc_rail +
        b_cost * cost_rail +
        b_in_vehicle_time * time_rail +
        b_access_time * access_rail +
        b_income_rail * income

    V[["bus"]] = asc_bus +
        b_cost * cost_bus +
        b_in_vehicle_time * time_bus +
        b_access_time * access_bus +
        b_income_bus * income

    mnl_settings = list(
        alternatives = c(car=1, air=3, rail=4, bus=2),
        avail = list(car=av_car, air=av_air, rail=av_rail, bus=av_bus),
        choiceVar = choice,
        utilities = V
    )

    P[["model"]] = apollo_mnl(mnl_settings, functionality)

    # For panel data, this multiplies observations for single individuals
    # together - no effect in multinomial logit but still required.
    P = apollo_panelProd(P, apollo_inputs, functionality)
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
}
```

---

```{r}
#| echo: true
#| filename: mode-choice-mnl.R

# estimate model
model = apollo_estimate(apollo_beta, apollo_fixed,
    apollo_probabilities, apollo_inputs)
```

---

```{r}
#| echo: true
#| filename: mode-choice-mnl.R

# Print results
apollo_modelOutput(model)
```

## Valuation using discrete choice models

- A common use for discrete choice models is to calculate willingness-to-pay
- The linear-in-parameters utility function puts everything in terms of utility
- If we have a cost parameter, we can use the model to put everything else in monetary units

## Valuation using discrete choice models

- The coefficients of the model are how much of `x` one unit of utility is worth
    - i.e. partial derivatives of utility with respect to `x`
- We want value of time, i.e. dollars / hour
- Travel time coefficient is utility / minute
- Cost coefficient is utility / dollar
- If $u$ is utility, $c$ is cost, and $t$ is in-vehicle time,
$\frac{\beta_t}{\beta_{c}} = \frac{\frac{\delta u}{\delta t}}{\frac{\delta u}{\delta c}} = \frac{\delta c}{\delta t}$

## Valuation using discrete choice models

```{r}
#| include: false
bc = round(model$estimate[["b_cost"]], digits=4)
bt = round(model$estimate[["b_in_vehicle_time"]], digits=4)
vtt = round(model$estimate[["b_in_vehicle_time"]] / model$estimate[["b_cost"]], digits=3)
```

$$\beta_c = `r bc`$$
$$\beta_t = `r bt`$$

$$ \frac{\beta_t}{\beta_c} = \frac{`r bt`}{`r bc`} = {£`r vtt`}/\mathrm{minute} = {£`r vtt * 60`}/\mathrm{hour} $$

## Confidence intervals for valuation

- We can use the Delta method to calculate standard errors for combinations of parameters [@daly_estimating_2020]
- Implemented in Apollo using `apollo_deltaMethod` function

---

```{r}
#| echo: true
#| filename: mode-choice-mnl.R

apollo_deltaMethod(model, deltaMethod_settings=list(
    operation="ratio",
    parName1="b_in_vehicle_time",
    parName2="b_cost",
    multPar1=60
))
```

## Exercise

- People may value in-vehicle time differently on the train vs. plane vs. car vs. bus
- Modify the model to estimate separate in-vehicle time coefficients for each mode, and calculate willingness-to-pay for each
- (One) answer in mode-choice-mnl-in-vehicle-answers.R

## Solution

```{r}
#| include: false
rm(list=ls())
```

```{r}
#| include: false
#| filename: mode-choice-mnl-in-vehicle-answers.R

library(apollo)
library(tidyverse)

database = read_csv("data/modechoice_apollo.csv")

apollo_initialise()

apollo_control = list(
    modelName = "Apollo_Mode_Choice",
    indivID="ID"
)

head(database)

```


```{r}
#| echo: true
#| filename: mode-choice-mnl-in-vehicle-answers.R

apollo_beta = c(
    asc_air = 0,
    asc_bus = 0,
    asc_rail = 0,
    # leaving out an asc_car as base category
    b_cost = 0,
    b_access_time = 0,
    b_in_vehicle_time_air = 0,
    b_in_vehicle_time_bus = 0,
    b_in_vehicle_time_car = 0,
    b_in_vehicle_time_rail = 0,
    # income and party_size are individual level variable, so
    # must be different for different alternatives
    b_income_air = 0,
    b_income_bus = 0,
    b_income_rail = 0
)
```

---

```{r}
#| include: false
#| filename: mode-choice-mnl-in-vehicle-answers.R

apollo_fixed = c()

apollo_inputs = apollo_validateInputs()
```

```{r}
#| echo: true
#| filename: mode-choice-mnl-in-vehicle-answers.R

apollo_probabilities = function(apollo_beta, apollo_inputs,
        functionality="estimate") {
    apollo_attach(apollo_beta, apollo_inputs)
    on.exit(apollo_detach(apollo_beta, apollo_inputs))

    P = list()

    # define utility functions
    V = list()
    # We can include cost and in-vehicle time here because they vary over
    # alternatives
    V[["car"]] = b_cost * cost_car +
        b_in_vehicle_time_car * time_car

    V[["air"]] = asc_air +
        b_cost * cost_air +
        b_in_vehicle_time_air * time_air +
        b_access_time * access_air +
        b_income_air * income

    V[["rail"]] = asc_rail +
        b_cost * cost_rail +
        b_in_vehicle_time_rail * time_rail +
        b_access_time * access_rail +
        b_income_rail * income

    V[["bus"]] = asc_bus +
        b_cost * cost_bus +
        b_in_vehicle_time_bus * time_bus +
        b_access_time * access_bus +
        b_income_bus * income

    mnl_settings = list(
        alternatives = c(car=1, air=3, rail=4, bus=2),
        avail = list(car=av_car, air=av_air, rail=av_rail, bus=av_bus),
        choiceVar = choice,
        utilities = V
    )

    P[["model"]] = apollo_mnl(mnl_settings, functionality)

    # For panel data, this multiplies observations for single individuals
    # together - no effect in multinomial logit but still required.
    P = apollo_panelProd(P, apollo_inputs, functionality)
    P = apollo_prepareProb(P, apollo_inputs, functionality)
    return(P)
}
```

---

```{r}
#| filename: mode-choice-mnl-in-vehicle-answers.R

# estimate model
model = apollo_estimate(apollo_beta, apollo_fixed,
    apollo_probabilities, apollo_inputs)

# Print results
apollo_modelOutput(model)
```

---

```{r}
#| echo: true
#| filename: mode-choice-mnl-in-vehicle-answers.R


apollo_deltaMethod(model, deltaMethod_settings=list(
    operation="ratio",
    parName1="b_in_vehicle_time_car",
    parName2="b_cost",
    multPar1=60
))
```

---

```{r}
#| echo: true
#| filename: mode-choice-mnl-in-vehicle-answers.R


apollo_deltaMethod(model, deltaMethod_settings=list(
    operation="ratio",
    parName1="b_in_vehicle_time_air",
    parName2="b_cost",
    multPar1=60
))
```

---

```{r}
#| echo: true
#| filename: mode-choice-mnl-in-vehicle-answers.R


apollo_deltaMethod(model, deltaMethod_settings=list(
    operation="ratio",
    parName1="b_in_vehicle_time_bus",
    parName2="b_cost",
    multPar1=60
))
```

---

```{r}
#| echo: true
#| filename: mode-choice-mnl-in-vehicle-answers.R


dm = apollo_deltaMethod(model, deltaMethod_settings=list(
    operation="ratio",
    parName1="b_in_vehicle_time_rail",
    parName2="b_cost",
    multPar1=60
))
```

## Interpretation

```{r}
#| include: false
car_vtt = apollo_deltaMethod(model, deltaMethod_settings=list(
    operation="ratio",
    parName1="b_in_vehicle_time_car",
    parName2="b_cost",
    multPar1=60
))[1,1]

air_vtt = apollo_deltaMethod(model, deltaMethod_settings=list(
    operation="ratio",
    parName1="b_in_vehicle_time_air",
    parName2="b_cost",
    multPar1=60
))[1,1]

bus_vtt = apollo_deltaMethod(model, deltaMethod_settings=list(
    operation="ratio",
    parName1="b_in_vehicle_time_bus",
    parName2="b_cost",
    multPar1=60
))[1,1]

rail_vtt = apollo_deltaMethod(model, deltaMethod_settings=list(
    operation="ratio",
    parName1="b_in_vehicle_time_rail",
    parName2="b_cost",
    multPar1=60
))[1,1]

df = tibble(lab=c("Car", "Air", "Bus", "Rail"), vtt=c(car_vtt, air_vtt, bus_vtt, rail_vtt))
```
```{r}
#| fig-alt: Bar plot of values of travel time for car, air, bus, and rail
#| dev: svg
#| fig-width: 6
#| fig-height: 3
#| out-width: 1200px
#| fig-align: center

ggplot(df, aes(x=lab, y=vtt)) +
    theme_dm +
    geom_col() +
    xlab("") +
    ylab("Value of travel time (£/hour)")

```

- People really don't like being on airplanes

## Correlation does not imply causation

[![XKCD cartoon demonstrating that correlation does not imply causation](correlation_2x.png)](https://xkcd.com/552/)

## Correlation does not imply causation

- Of course we can't interpret model coefficients as causal
- Valuation estimates are derived from coefficients
- Any bias in coefficients may affect valuation

## Correlation does not imply causation

- Often, prices will be correlated with unobserved positive aspects, biasing the value of time down
    - For example, legroom or class of service in the air travel case
- Other variable may be biased too
    - We don't have number of connections in our model. How might this bias the value of time for air travel?

## Questions?

## Independence of irrelevant alternatives

- When the utility of one alternative is increased, the probabilities of the other alternatives decrease in proportion to their probabilities
    - And vice-versa
    - Similarly when an alternative is added or removed

## Independence of irrelevant alternatives: the red bus/blue bus problem

- Suppose you have a model of mode choice, with two alternatives: driving and a red bus
- One individual has a 50% probability of choosing each alternative
- Suppose you paint half the buses red but don't change anything about the service

## Independence of irrelevant alternatives: the red bus/blue bus problem

- You'd expect this individual to now have probabilities 25% red bus, 25% blue bus, and 50% drive
- But, half of the probability has to come from each other alternative
- So, if blue bus has 25% probability, existing choices must all reduce by the same factor
- Red bus: 50% * .75 = 37.5%
- Same for car

## Independence of irrelevant alternatives: the math

$$ \frac{\delta p(b)}{\delta U_r}$$
$$
= \frac{
    e^{U_b}}{
        e^{U_r} + e^{U_b} + e^{U_c}}
    \frac{\delta}{\delta U_r}
$$

$$
    = e^{U_b} ( e^{U_r} + e^{U_b} + e^{U_c} \big)^{-2}
        \big[(e^{U_r} + e^{U_b} + e^{U_c}) \frac{\delta}{\delta U_r}\big]
$$

$$
    = e^{U_b} \big[ ( e^{U_r} + e^{U_b} + e^{U_c} \big)^{-2} e^{U_r} \big]
$$

# Nested logit model

## References

::: {#refs}
:::